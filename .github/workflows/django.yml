name: Django CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  linter:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 3
      matrix:
        linters: [black, isort, flake8]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: 3.10.5
        
    - name: Install ${{ matrix.linters }}
      run: |
        pip install ${{ matrix.linters }}

    - name: Run ${{ matrix.linters }}
      run: |
        ${{ matrix.linters }} .
        
  pytest:
    runs-on: ubuntu-latest

    env:
      SECRET_KEY: key_Only_dev
      DEBUG: True
      ALLOWED_HOSTS: =127.0.0.1,localhost,0.0.0.0
      DATABASE_URL: postgres://postgres:postgres@127.0.0.1:5432/postgres
    
    services:
      postgres:
        image: postgres:14.2-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: 3.10.4
    
    - uses: Gr1N/setup-poetry@v7
      with:
        poetry-version: 1.1.13
    
    - uses: actions/cache@v2
      with:
        path: ~/.cache/pypoetry/virtualenvs
        key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}

    - name: Install dependencies
      run: |
        poetry export --dev --without-hashes --format requirements.txt --output requirements.txt
        pip install -r requirements.txt
    
    - name: Collect statics
      run: |
        python manage.py collectstatic
        
    - name: Run migrations
      run: |
        python manage.py makemigrations
        python manage.py migrate
        
    - name: Run tests
      run: |
        python manage.py test --failfast
